var cov_tmt0mc1i1=function(){var path="/home/wasif/projects/file-clipper/src/Encryptor.js";var hash="cdc1aca6fcf23d88f0123f022308b45ed0230c36";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/wasif/projects/file-clipper/src/Encryptor.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:11},end:{line:2,column:24}},"2":{start:{line:3,column:13},end:{line:3,column:28}},"3":{start:{line:4,column:13},end:{line:4,column:28}},"4":{start:{line:5,column:18},end:{line:5,column:40}},"5":{start:{line:6,column:21},end:{line:6,column:37}},"6":{start:{line:7,column:12},end:{line:7,column:45}},"7":{start:{line:21,column:8},end:{line:21,column:47}},"8":{start:{line:24,column:27},end:{line:24,column:47}},"9":{start:{line:26,column:8},end:{line:26,column:74}},"10":{start:{line:34,column:8},end:{line:34,column:37}},"11":{start:{line:35,column:8},end:{line:35,column:24}},"12":{start:{line:44,column:8},end:{line:44,column:48}},"13":{start:{line:45,column:8},end:{line:45,column:30}},"14":{start:{line:64,column:8},end:{line:64,column:53}},"15":{start:{line:64,column:26},end:{line:64,column:52}},"16":{start:{line:65,column:8},end:{line:65,column:31}},"17":{start:{line:66,column:8},end:{line:66,column:66}},"18":{start:{line:67,column:8},end:{line:67,column:20}},"19":{start:{line:78,column:23},end:{line:78,column:45}},"20":{start:{line:79,column:27},end:{line:79,column:52}},"21":{start:{line:80,column:21},end:{line:80,column:34}},"22":{start:{line:81,column:26},end:{line:81,column:63}},"23":{start:{line:83,column:28},end:{line:83,column:74}},"24":{start:{line:85,column:24},end:{line:85,column:49}},"25":{start:{line:86,column:25},end:{line:86,column:39}},"26":{start:{line:88,column:8},end:{line:102,column:10}},"27":{start:{line:106,column:0},end:{line:106,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:22},end:{line:27,column:5}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:13},end:{line:36,column:5}},line:33},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:32},end:{line:46,column:5}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:63,column:6},end:{line:68,column:5}},line:63},"4":{name:"(anonymous_4)",decl:{start:{line:64,column:18},end:{line:64,column:19}},loc:{start:{line:64,column:26},end:{line:64,column:52}},line:64},"5":{name:"(anonymous_5)",decl:{start:{line:76,column:4},end:{line:76,column:5}},loc:{start:{line:76,column:36},end:{line:103,column:5}},line:76}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"cdc1aca6fcf23d88f0123f022308b45ed0230c36"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const crypto=(cov_tmt0mc1i1.s[0]++,require('crypto'));const fs=(cov_tmt0mc1i1.s[1]++,require('fs'));const path=(cov_tmt0mc1i1.s[2]++,require('path'));const zlib=(cov_tmt0mc1i1.s[3]++,require('zlib'));const Transform=(cov_tmt0mc1i1.s[4]++,require('./transform'));const getCipherKey=(cov_tmt0mc1i1.s[5]++,require('./key'));const ecp=(cov_tmt0mc1i1.s[6]++,require('event-callback-promise'));/**
 *
 */class Encrypter{/**
     *
     * @param secret
     * @returns {*}
     */getCipher(secret){cov_tmt0mc1i1.f[0]++;cov_tmt0mc1i1.s[7]++;// Generate a secure, pseudo random initialization vector.
this.initVect=crypto.randomBytes(16);// Generate a cipher key from the password.
const CIPHER_KEY=(cov_tmt0mc1i1.s[8]++,getCipherKey(secret));cov_tmt0mc1i1.s[9]++;return crypto.createCipheriv('aes256',CIPHER_KEY,this.initVect);}/**
     *
     * @returns {*}
     */getZip(){cov_tmt0mc1i1.f[1]++;cov_tmt0mc1i1.s[10]++;this.zip=zlib.createGzip();cov_tmt0mc1i1.s[11]++;return this.zip;}/**
     *
     * @param initVect
     * @returns {FileClipperTransform}
     */getTransformation(initVect){cov_tmt0mc1i1.f[2]++;cov_tmt0mc1i1.s[12]++;this.transform=new Transform(initVect);cov_tmt0mc1i1.s[13]++;return this.transform;}/**
     *
     * @param stream
     * @param source
     * @param destination
     * @param pipes
     * @param events
     * @returns {Promise<boolean>}
     */async pipe(stream,source,destination,pipes,events){cov_tmt0mc1i1.f[3]++;cov_tmt0mc1i1.s[14]++;pipes.map(data=>{cov_tmt0mc1i1.f[4]++;cov_tmt0mc1i1.s[15]++;return stream=stream.pipe(data);});cov_tmt0mc1i1.s[16]++;await events.onClose();cov_tmt0mc1i1.s[17]++;this.renamed=await events.onRename(source,destination);cov_tmt0mc1i1.s[18]++;return true;}/**
     *
     * @param file
     * @param secret
     * @returns {Promise<boolean>}
     */async encrypt({file,secret}){cov_tmt0mc1i1.f[5]++;const cipher=(cov_tmt0mc1i1.s[19]++,this.getCipher(secret));const readStream=(cov_tmt0mc1i1.s[20]++,fs.createReadStream(file));const gzip=(cov_tmt0mc1i1.s[21]++,this.getZip());const transform=(cov_tmt0mc1i1.s[22]++,this.getTransformation(this.initVect));// Create a write stream with a different file extension.
const writeStream=(cov_tmt0mc1i1.s[23]++,fs.createWriteStream(path.join(file+'.enc')));const onClose=(cov_tmt0mc1i1.s[24]++,ecp(writeStream,'close'));const onRename=(cov_tmt0mc1i1.s[25]++,ecp(fs.rename));cov_tmt0mc1i1.s[26]++;return await this.pipe(readStream,file+'.enc',file,[gzip,cipher,transform,writeStream],{onClose,onRename});}}cov_tmt0mc1i1.s[27]++;module.exports=new Encrypter();