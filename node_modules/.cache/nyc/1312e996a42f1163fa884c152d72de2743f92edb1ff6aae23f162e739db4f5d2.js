var cov_1ku2cra56i=function(){var path="/home/wasif/projects/file-clipper/src/Decryptor.js";var hash="a22c22d84952dc5e2208d0a6aa531ce60aaa69ff";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/wasif/projects/file-clipper/src/Decryptor.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:11},end:{line:2,column:24}},"2":{start:{line:3,column:13},end:{line:3,column:28}},"3":{start:{line:4,column:21},end:{line:4,column:37}},"4":{start:{line:5,column:12},end:{line:5,column:45}},"5":{start:{line:21,column:8},end:{line:21,column:67}},"6":{start:{line:23,column:29},end:{line:23,column:59}},"7":{start:{line:24,column:34},end:{line:24,column:65}},"8":{start:{line:26,column:8},end:{line:26,column:45}},"9":{start:{line:27,column:8},end:{line:27,column:34}},"10":{start:{line:29,column:8},end:{line:29,column:46}},"11":{start:{line:30,column:8},end:{line:30,column:80}},"12":{start:{line:38,column:8},end:{line:38,column:40}},"13":{start:{line:39,column:8},end:{line:39,column:26}},"14":{start:{line:58,column:8},end:{line:58,column:53}},"15":{start:{line:58,column:26},end:{line:58,column:52}},"16":{start:{line:59,column:8},end:{line:59,column:31}},"17":{start:{line:60,column:8},end:{line:60,column:66}},"18":{start:{line:61,column:8},end:{line:61,column:20}},"19":{start:{line:72,column:25},end:{line:72,column:66}},"20":{start:{line:74,column:27},end:{line:74,column:67}},"21":{start:{line:75,column:22},end:{line:75,column:37}},"22":{start:{line:76,column:28},end:{line:76,column:65}},"23":{start:{line:78,column:24},end:{line:78,column:49}},"24":{start:{line:79,column:25},end:{line:79,column:39}},"25":{start:{line:81,column:8},end:{line:94,column:10}},"26":{start:{line:96,column:8},end:{line:96,column:20}},"27":{start:{line:101,column:0},end:{line:101,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:41},end:{line:31,column:5}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:15},end:{line:40,column:5}},line:37},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:57,column:6},end:{line:62,column:5}},line:57},"3":{name:"(anonymous_3)",decl:{start:{line:58,column:18},end:{line:58,column:19}},loc:{start:{line:58,column:26},end:{line:58,column:52}},line:58},"4":{name:"(anonymous_4)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:36},end:{line:98,column:5}},line:70}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"a22c22d84952dc5e2208d0a6aa531ce60aaa69ff"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const crypto=(cov_1ku2cra56i.s[0]++,require('crypto'));const fs=(cov_1ku2cra56i.s[1]++,require('fs'));const zlib=(cov_1ku2cra56i.s[2]++,require('zlib'));const getCipherKey=(cov_1ku2cra56i.s[3]++,require('./key'));const ecp=(cov_1ku2cra56i.s[4]++,require('event-callback-promise'));/**
 *
 */class Decryptor{/**
     *
     * @param file
     * @param secret
     * @param ecp
     * @returns {Promise<*>}
     */async getDecipher(file,secret,ecp){cov_1ku2cra56i.f[0]++;cov_1ku2cra56i.s[5]++;// First, get the initialization vector from the file.
this.readInitVect=fs.createReadStream(file,{end:15});const onVectorData=(cov_1ku2cra56i.s[6]++,ecp(this.readInitVect,'data'));const onVectorDataClose=(cov_1ku2cra56i.s[7]++,ecp(this.readInitVect,'close'));cov_1ku2cra56i.s[8]++;this.initVect=await onVectorData();cov_1ku2cra56i.s[9]++;await onVectorDataClose();cov_1ku2cra56i.s[10]++;this.cipherKey=getCipherKey(secret);cov_1ku2cra56i.s[11]++;return crypto.createDecipheriv('aes256',this.cipherKey,this.initVect);}/**
     *
     * @returns {*}
     */getUnZip(){cov_1ku2cra56i.f[1]++;cov_1ku2cra56i.s[12]++;this.unzip=zlib.createUnzip();cov_1ku2cra56i.s[13]++;return this.unzip;}/**
     *
     * @param stream
     * @param source
     * @param destination
     * @param pipes
     * @param events
     * @returns {Promise<boolean>}
     */async pipe(stream,source,destination,pipes,events){cov_1ku2cra56i.f[2]++;cov_1ku2cra56i.s[14]++;pipes.map(data=>{cov_1ku2cra56i.f[3]++;cov_1ku2cra56i.s[15]++;return stream=stream.pipe(data);});cov_1ku2cra56i.s[16]++;await events.onClose();cov_1ku2cra56i.s[17]++;this.renamed=await events.onRename(source,destination);cov_1ku2cra56i.s[18]++;return true;}/**
     *
     * @param file
     * @param secret
     * @returns {Promise<boolean>}
     */async decrypt({file,secret}){cov_1ku2cra56i.f[4]++;const decipher=(cov_1ku2cra56i.s[19]++,await this.getDecipher(file,secret,ecp));const readStream=(cov_1ku2cra56i.s[20]++,fs.createReadStream(file,{start:16}));const unzip=(cov_1ku2cra56i.s[21]++,this.getUnZip());const writeStream=(cov_1ku2cra56i.s[22]++,fs.createWriteStream(file+'.unenc'));const onClose=(cov_1ku2cra56i.s[23]++,ecp(writeStream,'close'));const onRename=(cov_1ku2cra56i.s[24]++,ecp(fs.rename));cov_1ku2cra56i.s[25]++;this.pipe(readStream,file+'.unenc',file,[decipher,unzip,writeStream],{onClose,onRename});cov_1ku2cra56i.s[26]++;return true;}}cov_1ku2cra56i.s[27]++;module.exports=new Decryptor();